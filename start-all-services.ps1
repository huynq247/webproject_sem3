#!/usr/bin/env pwsh
# ==============================================================================
# SCRIPT KH·ªûI ƒê·ªòNG T·∫§T C·∫¢ MICROSERVICES
# ==============================================================================
# M√¥ t·∫£: Script n√†y s·∫Ω kh·ªüi ƒë·ªông t·∫•t c·∫£ 3 microservices trong c√°c c·ª≠a s·ªï ri√™ng bi·ªát
# T√°c gi·∫£: Auto-generated
# Ng√†y t·∫°o: 2025-10-13
# ==============================================================================

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  üöÄ KH·ªûI ƒê·ªòNG T·∫§T C·∫¢ MICROSERVICES" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# ƒê∆∞·ªùng d·∫´n Python executable
$pythonExe = "D:\XProject\X1.1MicroService\.venv\Scripts\python.exe"
$baseDir = "D:\XProject\X1.1MicroService\lms_micro_services"

# Ki·ªÉm tra Python executable c√≥ t·ªìn t·∫°i kh√¥ng
if (-not (Test-Path $pythonExe)) {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y Python executable t·∫°i: $pythonExe" -ForegroundColor Red
    Write-Host "Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n .venv" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ ƒê√£ t√¨m th·∫•y Python executable" -ForegroundColor Green
Write-Host ""

# H√†m kh·ªüi ƒë·ªông service trong c·ª≠a s·ªï m·ªõi
function Start-MicroService {
    param (
        [string]$ServiceName,
        [string]$ServicePath,
        [int]$Port
    )
    
    Write-Host "üîÑ ƒêang kh·ªüi ƒë·ªông $ServiceName tr√™n port $Port..." -ForegroundColor Yellow
    
    $fullPath = Join-Path $baseDir $ServicePath
    
    if (-not (Test-Path $fullPath)) {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: $fullPath" -ForegroundColor Red
        return $false
    }
    
    # Kh·ªüi ƒë·ªông service trong PowerShell window m·ªõi
    Start-Process powershell -ArgumentList @(
        "-NoExit",
        "-Command",
        "Write-Host '========================================' -ForegroundColor Cyan; " +
        "Write-Host '  $ServiceName' -ForegroundColor Green; " +
        "Write-Host '  Port: $Port' -ForegroundColor Yellow; " +
        "Write-Host '========================================' -ForegroundColor Cyan; " +
        "Write-Host ''; " +
        "Set-Location '$fullPath'; " +
        "& '$pythonExe' main.py"
    )
    
    Write-Host "‚úÖ ƒê√£ kh·ªüi ƒë·ªông $ServiceName trong c·ª≠a s·ªï m·ªõi" -ForegroundColor Green
    Write-Host ""
    return $true
}

# Kh·ªüi ƒë·ªông t·ª´ng service
Write-Host "üìã B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông c√°c services..." -ForegroundColor Cyan
Write-Host ""

# 1. Auth Service
Start-MicroService -ServiceName "AUTH SERVICE" -ServicePath "auth-service" -Port 8001
Start-Sleep -Seconds 2

# 2. Content Service
Start-MicroService -ServiceName "CONTENT SERVICE" -ServicePath "content-service" -Port 8002
Start-Sleep -Seconds 2

# 3. Assignment Service
Start-MicroService -ServiceName "ASSIGNMENT SERVICE" -ServicePath "assignment-service" -Port 8003
Start-Sleep -Seconds 2

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  ‚úÖ HO√ÄN T·∫§T KH·ªûI ƒê·ªòNG" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "ƒêang ch·ªù c√°c services kh·ªüi ƒë·ªông..." -ForegroundColor Yellow
Write-Host "Vui l√≤ng ƒë·ª£i kho·∫£ng 10-15 gi√¢y ƒë·ªÉ c√°c services ho√†n t·∫•t kh·ªüi ƒë·ªông." -ForegroundColor Yellow
Write-Host ""

# Ch·ªù 15 gi√¢y ƒë·ªÉ services kh·ªüi ƒë·ªông
Start-Sleep -Seconds 15

# Ki·ªÉm tra health c·ªßa c√°c services
Write-Host "üß™ Ki·ªÉm tra tr·∫°ng th√°i c√°c services..." -ForegroundColor Cyan
Write-Host ""

function Test-ServiceHealth {
    param (
        [string]$ServiceName,
        [int]$Port
    )
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:$Port/health" -TimeoutSec 5 -ErrorAction Stop
        Write-Host "‚úÖ $ServiceName (port $Port): ONLINE" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå $ServiceName (port $Port): OFFLINE ho·∫∑c ch∆∞a s·∫µn s√†ng" -ForegroundColor Red
        return $false
    }
}

# Ki·ªÉm tra t·ª´ng service
$authOk = Test-ServiceHealth -ServiceName "Auth Service" -Port 8001
$contentOk = Test-ServiceHealth -ServiceName "Content Service" -Port 8002
$assignmentOk = Test-ServiceHealth -ServiceName "Assignment Service" -Port 8003

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  üìä K·∫æT QU·∫¢" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

if ($authOk -and $contentOk -and $assignmentOk) {
    Write-Host "‚úÖ T·∫•t c·∫£ services ƒë√£ s·∫µn s√†ng!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  M·ªôt s·ªë services ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra c√°c c·ª≠a s·ªï PowerShell." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìö Truy c·∫≠p API Documentation:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Auth Service:       http://localhost:8001/docs" -ForegroundColor White
Write-Host "  ‚Ä¢ Content Service:    http://localhost:8002/docs" -ForegroundColor White
Write-Host "  ‚Ä¢ Assignment Service: http://localhost:8003/docs" -ForegroundColor White
Write-Host ""
Write-Host "üõë ƒê·ªÉ d·ª´ng services: Nh·∫•n Ctrl+C trong t·ª´ng c·ª≠a s·ªï PowerShell" -ForegroundColor Yellow
Write-Host ""
Write-Host "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng c·ª≠a s·ªï n√†y..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
